{
  "_args": [
    [
      {
        "raw": "gl-vec2@^1.0.0",
        "scope": null,
        "escapedName": "gl-vec2",
        "name": "gl-vec2",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\eresvani\\Desktop\\My Work\\Projects\\Boots Chatbot\\API Code\\er_bootsbotapi_1.0\\node_modules\\quagga"
    ]
  ],
  "_from": "gl-vec2@>=1.0.0 <2.0.0",
  "_id": "gl-vec2@1.0.0",
  "_inCache": true,
  "_location": "/gl-vec2",
  "_nodeVersion": "0.10.32",
  "_npmUser": {
    "name": "mattdesl",
    "email": "dave.des@gmail.com"
  },
  "_npmVersion": "2.1.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gl-vec2@^1.0.0",
    "scope": null,
    "escapedName": "gl-vec2",
    "name": "gl-vec2",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/quagga"
  ],
  "_resolved": "https://registry.npmjs.org/gl-vec2/-/gl-vec2-1.0.0.tgz",
  "_shasum": "77fce6ae9612856d6c8b621cd261cd8281b9c637",
  "_shrinkwrap": null,
  "_spec": "gl-vec2@^1.0.0",
  "_where": "C:\\Users\\eresvani\\Desktop\\My Work\\Projects\\Boots Chatbot\\API Code\\er_bootsbotapi_1.0\\node_modules\\quagga",
  "bugs": {
    "url": "https://github.com/stackgl/gl-vec2/issues"
  },
  "contributors": [
    {
      "name": "Brandon Jones",
      "email": "tojiro@gmail.com"
    },
    {
      "name": "Colin MacKenzie IV",
      "email": "sinisterchipmunk@gmail.com"
    }
  ],
  "dependencies": {},
  "description": "gl-matrix's vec2, split into smaller pieces",
  "devDependencies": {
    "dox": "git://github.com/hughsk/dox.git#api-context"
  },
  "directories": {},
  "dist": {
    "shasum": "77fce6ae9612856d6c8b621cd261cd8281b9c637",
    "tarball": "https://registry.npmjs.org/gl-vec2/-/gl-vec2-1.0.0.tgz"
  },
  "gitHead": "21f460a371540258521fd2f720d80f14e87bd400",
  "homepage": "https://github.com/stackgl/gl-vec2",
  "keywords": [
    "gl-matrix",
    "matrix",
    "math",
    "gl",
    "vec2",
    "vec",
    "2d",
    "vector",
    "maths"
  ],
  "license": {
    "type": "zlib",
    "url": "http://github.com/stackgl/gl-vec2/blob/master/LICENSE.md"
  },
  "main": "index.js",
  "maintainers": [
    {
      "name": "mattdesl",
      "email": "dave.des@gmail.com"
    }
  ],
  "name": "gl-vec2",
  "optionalDependencies": {},
  "readme": "# gl-vec2\n\n[![stable](http://badges.github.io/stability-badges/dist/stable.svg)](http://github.com/badges/stability-badges)\n\nPart of a fork of [@toji](http://github.com/toji)'s\n[gl-matrix](http://github.com/toji/gl-matrix) split into smaller pieces: this\npackage contains `glMatrix.vec2`.\n\n## Usage\n\n[![NPM](https://nodei.co/npm/gl-vec2.png)](https://nodei.co/npm/gl-vec2/)\n\n### `vec2 = require('gl-vec2')`\n\nWill load all of the module's functionality and expose it on a single\nobject. Note that any of the methods may also be required directly\nfrom their files.\n\nFor example, the following are equivalent:\n\n``` javascript\nvar scale = require('gl-vec2').scale\nvar scale = require('gl-vec2/scale')\n```\n\n## API\n\n  - [add()](#addoutvec2avec2bvec2)\n  - [clone()](#cloneavec2)\n  - [copy()](#copyoutvec2avec2)\n  - [create()](#create)\n  - [cross()](#crossoutvec3avec2bvec2)\n  - [distance()](#distanceavec2bvec2)\n  - [divide()](#divideoutvec2avec2bvec2)\n  - [dot()](#dotavec2bvec2)\n  - [forEach()](#foreachaarraystridenumberoffsetnumbercountnumberfnfunctionargobject)\n  - [fromValues()](#fromvaluesxnumberynumber)\n  - [length()](#lengthavec2)\n  - [lerp()](#lerpoutvec2avec2bvec2tnumber)\n  - [max()](#maxoutvec2avec2bvec2)\n  - [min()](#minoutvec2avec2bvec2)\n  - [multiply()](#multiplyoutvec2avec2bvec2)\n  - [negate()](#negateoutvec2avec2)\n  - [normalize()](#normalizeoutvec2avec2)\n  - [random()](#randomoutvec2scalenumber)\n  - [scale()](#scaleoutvec2avec2bnumber)\n  - [scaleAndAdd()](#scaleandaddoutvec2avec2bvec2scalenumber)\n  - [set()](#setoutvec2xnumberynumber)\n  - [squaredDistance()](#squareddistanceavec2bvec2)\n  - [squaredLength()](#squaredlengthavec2)\n  - [subtract()](#subtractoutvec2avec2bvec2)\n  - [transformMat2()](#transformmat2outvec2avec2mmat2)\n  - [transformMat2d()](#transformmat2doutvec2avec2mmat2d)\n  - [transformMat3()](#transformmat3outvec2avec2mmat3)\n  - [transformMat4()](#transformmat4outvec2avec2mmat4)\n\n## add(out:vec2, a:vec2, b:vec2)\n\n  Adds two vec2's\n\n## clone(a:vec2)\n\n  Creates a new vec2 initialized with values from an existing vector\n\n## copy(out:vec2, a:vec2)\n\n  Copy the values from one vec2 to another\n\n## create()\n\n  Creates a new, empty vec2\n\n## cross(out:vec3, a:vec2, b:vec2)\n\n  Computes the cross product of two vec2's\n  Note that the cross product must by definition produce a 3D vector\n\n## distance(a:vec2, b:vec2)\n\n  Calculates the euclidian distance between two vec2's\n\n## divide(out:vec2, a:vec2, b:vec2)\n\n  Divides two vec2's\n\n## dot(a:vec2, b:vec2)\n\n  Calculates the dot product of two vec2's\n\n## forEach(a:Array, stride:Number, offset:Number, count:Number, fn:Function, [arg]:Object)\n\n  Perform some operation over an array of vec2s.\n\n## fromValues(x:Number, y:Number)\n\n  Creates a new vec2 initialized with the given values\n\n## length(a:vec2)\n\n  Calculates the length of a vec2\n\n## lerp(out:vec2, a:vec2, b:vec2, t:Number)\n\n  Performs a linear interpolation between two vec2's\n\n## max(out:vec2, a:vec2, b:vec2)\n\n  Returns the maximum of two vec2's\n\n## min(out:vec2, a:vec2, b:vec2)\n\n  Returns the minimum of two vec2's\n\n## multiply(out:vec2, a:vec2, b:vec2)\n\n  Multiplies two vec2's\n\n## negate(out:vec2, a:vec2)\n\n  Negates the components of a vec2\n\n## normalize(out:vec2, a:vec2)\n\n  Normalize a vec2\n\n## random(out:vec2, [scale]:Number)\n\n  Generates a random vector with the given scale\n\n## scale(out:vec2, a:vec2, b:Number)\n\n  Scales a vec2 by a scalar number\n\n## scaleAndAdd(out:vec2, a:vec2, b:vec2, scale:Number)\n\n  Adds two vec2's after scaling the second operand by a scalar value\n\n## set(out:vec2, x:Number, y:Number)\n\n  Set the components of a vec2 to the given values\n\n## squaredDistance(a:vec2, b:vec2)\n\n  Calculates the squared euclidian distance between two vec2's\n\n## squaredLength(a:vec2)\n\n  Calculates the squared length of a vec2\n\n## subtract(out:vec2, a:vec2, b:vec2)\n\n  Subtracts vector b from vector a\n\n## transformMat2(out:vec2, a:vec2, m:mat2)\n\n  Transforms the vec2 with a mat2\n\n## transformMat2d(out:vec2, a:vec2, m:mat2d)\n\n  Transforms the vec2 with a mat2d\n\n## transformMat3(out:vec2, a:vec2, m:mat3)\n\n  Transforms the vec2 with a mat3\n  3rd vector component is implicitly '1'\n\n## transformMat4(out:vec2, a:vec2, m:mat4)\n\n  Transforms the vec2 with a mat4\n  3rd vector component is implicitly '0'\n  4th vector component is implicitly '1'\n\n## License\n\n[zlib](http://en.wikipedia.org/wiki/Zlib_License). See [LICENSE.md](https://github.com/stackgl/gl-vec2/blob/master/LICENSE.md) for details.",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/stackgl/gl-vec2.git"
  },
  "scripts": {
    "get-docs": "cat *.js | dox --api"
  },
  "version": "1.0.0"
}
